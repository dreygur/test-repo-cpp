<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [W3\W3.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image W3\W3.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Wed Oct 17 18:09:54 2018
<BR><P>
<H3>Maximum Stack Usage =        776 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; App_Main &rArr; MainStateMachineLoop &rArr; EndOfReceiveUART &rArr; IncomingDataAnalysis &rArr; MB_Apply_ReadHoldingRegisters &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[1e]">AES_RNG_LPUART1_IRQHandler</a> from stm32l0xx_it.o(i.AES_RNG_LPUART1_IRQHandler) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[1f]">LCD_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[13]">LPTIM1_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from stm32l0xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l063xx.o(.text)
 <LI><a href="#[16]">TIM21_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[17]">TIM22_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[14]">TIM2_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[15]">TIM6_DAC_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[24]">UART_DMAAbortOnError</a> from stm32l0xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from stm32l0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[1d]">USART2_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[20]">USB_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l063xx.o(.text) referenced from startup_stm32l063xx.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l063xx.o(.text)
 <LI><a href="#[25]">fputc</a> from logger.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[21]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(.text)
</UL>
<P><STRONG><a name="[110]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[26]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[33]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[111]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[112]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[113]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[114]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[115]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l063xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NodeParameters_CRC
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewDataFlagsSelector
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingDataAnalysis
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_receiveData
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_WriteMultipleRegisters
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NodeParameters_CRC
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_DataChunk_ToExternalFlash
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_WriteMultipleRegisters
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_ReadHoldingRegisters
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_receiveData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFromFlashHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParams_GW2BRSendRF
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryResp1_ResponseHnadler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeepAliveResponseHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GW2BR_QuerySendRF
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_ChecksumOfNodesData
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7c]"></a>strtok</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFromFlashHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Analyzer
</UL>

<P><STRONG><a name="[2e]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFromFlashHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Analyzer
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[11b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[11c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[11d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[32]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[34]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[11e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>ACKResponseHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gw_brprotocolsimp.o(i.ACKResponseHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ACKResponseHandler &rArr; CheckIfReset &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfNewData4Node
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfReset
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIncomingData4BRAnalays
</UL>

<P><STRONG><a name="[39]"></a>ACK_SendRF</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gw_brprotocolsimp.o(i.ACK_SendRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ACK_SendRF &rArr; sendDataOverRF &rArr; CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendCommand
</UL>

<P><STRONG><a name="[1e]"></a>AES_RNG_LPUART1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.AES_RNG_LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AES_RNG_LPUART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>AllLedsBlink</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gpio.o(i.AllLedsBlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AllLedsBlink &rArr; GPIO_SetVal &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetVal
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tests
</UL>

<P><STRONG><a name="[42]"></a>App_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_main.o(i.App_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = App_Init &rArr; Radio_Init &rArr; CC1101_SettingsFromMSP430 &rArr; CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WD_Period_Set
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Receive_Interrupt
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_WD_Reset
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main
</UL>

<P><STRONG><a name="[49]"></a>App_Main</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_main.o(i.App_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = App_Main &rArr; MainStateMachineLoop &rArr; EndOfReceiveUART &rArr; IncomingDataAnalysis &rArr; MB_Apply_ReadHoldingRegisters &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tests
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WD_Reload
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStateMachineLoop
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_Tests
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_GPIOInterruptEnable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>BIT_ChecksumOfNodesData</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, bit.o(i.BIT_ChecksumOfNodesData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BIT_ChecksumOfNodesData &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_Tests
</UL>

<P><STRONG><a name="[53]"></a>BIT_SPI_FlashTest</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, bit.o(i.BIT_SPI_FlashTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BIT_SPI_FlashTest &rArr; EXTERNAL_FLASH_ReadDeviceID &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadDeviceID
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_Tests
</UL>

<P><STRONG><a name="[4b]"></a>BIT_Tests</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bit.o(i.BIT_Tests))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BIT_Tests &rArr; BIT_ChecksumOfNodesData &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_SPI_FlashTest
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_ChecksumOfNodesData
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main
</UL>

<P><STRONG><a name="[55]"></a>Begin_Bootloading</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bootloader_support.o(i.Begin_Bootloading))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Begin_Bootloading &rArr; Param_SetVal &rArr; EEPROM_WRITE_WORD &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_SetVal
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_Update_Parsing
</UL>

<P><STRONG><a name="[107]"></a>CC1101</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cc1101.o(i.CC1101))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init
</UL>

<P><STRONG><a name="[58]"></a>CC1101_GPIOInterruptDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_main.o(i.CC1101_GPIOInterruptDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CC1101_GPIOInterruptDisable &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_Update_Parsing
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_receiveState
</UL>

<P><STRONG><a name="[4a]"></a>CC1101_GPIOInterruptEnable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_main.o(i.CC1101_GPIOInterruptEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CC1101_GPIOInterruptEnable &rArr; HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_receiveState
</UL>

<P><STRONG><a name="[5b]"></a>CC1101_IsExist</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cc1101.o(i.CC1101_IsExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CC1101_IsExist &rArr; CC1101_readReg &rArr; SPI1_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_readReg
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init
</UL>

<P><STRONG><a name="[5d]"></a>CC1101_SettingsFromMSP430</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cc1101.o(i.CC1101_SettingsFromMSP430))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CC1101_SettingsFromMSP430 &rArr; CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_writeBurstReg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init
</UL>

<P><STRONG><a name="[60]"></a>CC1101_cmdStrobe</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cc1101.o(i.CC1101_cmdStrobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CC1101_cmdStrobe &rArr; SPI1_TransmitStrobe &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TransmitStrobe
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_setTxState
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_setRxState
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
</UL>

<P><STRONG><a name="[64]"></a>CC1101_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cc1101.o(i.CC1101_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CC1101_init &rArr; CC1101_reset &rArr; SPI1_TransmitStrobe &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init
</UL>

<P><STRONG><a name="[66]"></a>CC1101_readBurstReg</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, cc1101.o(i.CC1101_readBurstReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CC1101_readBurstReg &rArr; SPI1_ReceiveBurst &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReceiveBurst
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_receiveData
</UL>

<P><STRONG><a name="[5c]"></a>CC1101_readReg</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, cc1101.o(i.CC1101_readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CC1101_readReg &rArr; SPI1_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Receive
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_receiveData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_IsExist
</UL>

<P><STRONG><a name="[6b]"></a>CC1101_receiveData</STRONG> (Thumb, 438 bytes, Stack size 256 bytes, cc1101.o(i.CC1101_receiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = CC1101_receiveData &rArr; CC1101_readBurstReg &rArr; SPI1_ReceiveBurst &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_AES_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt_Data
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_setRxState
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_readReg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_readBurstReg
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Routine
</UL>

<P><STRONG><a name="[65]"></a>CC1101_reset</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cc1101.o(i.CC1101_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CC1101_reset &rArr; SPI1_TransmitStrobe &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TransmitStrobe
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_init
</UL>

<P><STRONG><a name="[6c]"></a>CC1101_setRxState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cc1101.o(i.CC1101_setRxState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CC1101_setRxState &rArr; CC1101_cmdStrobe &rArr; SPI1_TransmitStrobe &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_cmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_receiveData
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
</UL>

<P><STRONG><a name="[71]"></a>CC1101_setTxState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cc1101.o(i.CC1101_setTxState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CC1101_setTxState &rArr; CC1101_cmdStrobe &rArr; SPI1_TransmitStrobe &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_cmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
</UL>

<P><STRONG><a name="[5f]"></a>CC1101_writeBurstReg</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, cc1101.o(i.CC1101_writeBurstReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TransmitBurst
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_SettingsFromMSP430
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
</UL>

<P><STRONG><a name="[3a]"></a>CalcCRC</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, modbus_driver.o(i.CalcCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NodeParameters_CRC
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_WriteSingleRegister
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_WriteMultipleRegisters
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_ReadHoldingRegisters
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_receiveData
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParams_GW2BRSendRF
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootCommand_SendRF
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootAndDefCommand_SendRF
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NACK_SendRF
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GW2BR_QuerySendRF
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_SendRF
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_ChecksumOfNodesData
</UL>

<P><STRONG><a name="[77]"></a>Calc_And_Save_Binary_Image_CRC</STRONG> (Thumb, 130 bytes, Stack size 312 bytes, bootloader_support.o(i.Calc_And_Save_Binary_Image_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Calc_And_Save_Binary_Image_CRC &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Image_Size_From_ExternalFlash
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ReceivedFirmwareImage_CRC
</UL>

<P><STRONG><a name="[37]"></a>CheckIfNewData4Node</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, modbus_app_layer.o(i.CheckIfNewData4Node))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NodeParameters_CRC
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryResp2_ResponseHnadler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryResp1_ResponseHnadler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKResponseHandler
</UL>

<P><STRONG><a name="[38]"></a>CheckIfReset</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gw_brprotocolsimp.o(i.CheckIfReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CheckIfReset &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryResp2_ResponseHnadler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryResp1_ResponseHnadler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKResponseHandler
</UL>

<P><STRONG><a name="[7a]"></a>Check_ReceivedFirmwareImage_CRC</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, modbus_app_layer.o(i.Check_ReceivedFirmwareImage_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = Check_ReceivedFirmwareImage_CRC &rArr; Calc_And_Save_Binary_Image_CRC &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_And_Save_Binary_Image_CRC
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_Update_Parsing
</UL>

<P><STRONG><a name="[44]"></a>Check_WD_Reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, watchdog.o(i.Check_WD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Check_WD_Reset &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[4e]"></a>CommandHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, receive_interrupt.o(i.CommandHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = CommandHandler &rArr; Command_Analyzer &rArr; PrintFromFlashHandler &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Analyzer
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main
</UL>

<P><STRONG><a name="[7b]"></a>Command_Analyzer</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, logger.o(i.Command_Analyzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Command_Analyzer &rArr; PrintFromFlashHandler &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFromFlashHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_GetDeviceID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_AUTO_FILL_SECTORS
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[6f]"></a>Decrypt_Data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, encryption.o(i.Decrypt_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Decrypt_Data &rArr; HAL_CRYP_AESECB_Decrypt &rArr; CRYP_ProcessData
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_AES_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_DeInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_AESECB_Decrypt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_receiveData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_Test
</UL>

<P><STRONG><a name="[fd]"></a>EEPROM_READ_WORD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eeprom.o(i.EEPROM_READ_WORD))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_SetVal
</UL>

<P><STRONG><a name="[83]"></a>EEPROM_WRITE_WORD</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, eeprom.o(i.EEPROM_WRITE_WORD))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EEPROM_WRITE_WORD &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_SetVal
</UL>

<P><STRONG><a name="[7f]"></a>EXTERNAL_FLASH_AUTO_FILL_SECTORS</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, logger.o(i.EXTERNAL_FLASH_AUTO_FILL_SECTORS))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = EXTERNAL_FLASH_AUTO_FILL_SECTORS &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Analyzer
</UL>

<P><STRONG><a name="[89]"></a>EXTERNAL_FLASH_EnableWriting</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, external_flash.o(i.EXTERNAL_FLASH_EnableWriting))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EXTERNAL_FLASH_EnableWriting &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetVal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WaitUntilFlashNotBusy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_PageProgram
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EraseSector
</UL>

<P><STRONG><a name="[8c]"></a>EXTERNAL_FLASH_EraseSector</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, external_flash.o(i.EXTERNAL_FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EXTERNAL_FLASH_EraseSector &rArr; EXTERNAL_FLASH_EnableWriting &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetVal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WaitUntilFlashNotBusy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EnableWriting
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_For_Bootloading
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
</UL>

<P><STRONG><a name="[7e]"></a>EXTERNAL_FLASH_GetDeviceID</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, logger.o(i.EXTERNAL_FLASH_GetDeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = EXTERNAL_FLASH_GetDeviceID &rArr; EXTERNAL_FLASH_ReadDeviceID &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadDeviceID
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Analyzer
</UL>

<P><STRONG><a name="[48]"></a>EXTERNAL_FLASH_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, external_flash.o(i.EXTERNAL_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTERNAL_FLASH_Init &rArr; GPIO_SetVal &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetVal
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_GetDeviceID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_AUTO_FILL_SECTORS
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_SPI_FlashTest
</UL>

<P><STRONG><a name="[8e]"></a>EXTERNAL_FLASH_IsFlashBusy</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, external_flash.o(i.EXTERNAL_FLASH_IsFlashBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetVal
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WaitUntilFlashNotBusy
</UL>

<P><STRONG><a name="[8f]"></a>EXTERNAL_FLASH_PageProgram</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, external_flash.o(i.EXTERNAL_FLASH_PageProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EXTERNAL_FLASH_PageProgram &rArr; EXTERNAL_FLASH_EnableWriting &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetVal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WaitUntilFlashNotBusy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EnableWriting
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
</UL>

<P><STRONG><a name="[52]"></a>EXTERNAL_FLASH_ReadData</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, external_flash.o(i.EXTERNAL_FLASH_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetVal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WaitUntilFlashNotBusy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_And_Save_Binary_Image_CRC
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NodeParameters_CRC
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FUTS_Register
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_ReadHoldingRegisters
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFromFlashHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_AUTO_FILL_SECTORS
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeepAliveResponseHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataOfParamsFromFlash
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataAndSizeOfQuery
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfReset
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_ChecksumOfNodesData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Image_Size_From_ExternalFlash
</UL>

<P><STRONG><a name="[54]"></a>EXTERNAL_FLASH_ReadDeviceID</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, external_flash.o(i.EXTERNAL_FLASH_ReadDeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EXTERNAL_FLASH_ReadDeviceID &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetVal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WaitUntilFlashNotBusy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_GetDeviceID
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_SPI_FlashTest
</UL>

<P><STRONG><a name="[8b]"></a>EXTERNAL_FLASH_WaitUntilFlashNotBusy</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, external_flash.o(i.EXTERNAL_FLASH_WaitUntilFlashNotBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_IsFlashBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_PageProgram
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EnableWriting
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadDeviceID
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EraseSector
</UL>

<P><STRONG><a name="[90]"></a>EXTERNAL_FLASH_WriteData</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, external_flash.o(i.EXTERNAL_FLASH_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EXTERNAL_FLASH_WriteData &rArr; EXTERNAL_FLASH_PageProgram &rArr; EXTERNAL_FLASH_EnableWriting &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_PageProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_DataChunk_ToExternalFlash
</UL>

<P><STRONG><a name="[79]"></a>EXTERNAL_FLASH_WriteData_Automatic</STRONG> (Thumb, 582 bytes, Stack size 72 bytes, external_flash.o(i.EXTERNAL_FLASH_WriteData_Automatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_PageProgram
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EraseSector
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Image_Size_To_ExternalFlash
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_And_Save_Binary_Image_CRC
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NodeParameters_CRC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FUTS_Register
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_WriteSingleRegister
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_WriteMultipleRegisters
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_AUTO_FILL_SECTORS
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsetResetBit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsetResetAndDefBit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryResp1_ResponseHnadler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeepAliveResponseHandler
</UL>

<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; RF_Routine &rArr; CC1101_receiveData &rArr; CC1101_readBurstReg &rArr; SPI1_ReceiveBurst &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>Encrypt_Data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, encryption.o(i.Encrypt_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Encrypt_Data &rArr; HAL_CRYP_AESECB_Encrypt &rArr; CRYP_ProcessData
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_AES_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_DeInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_AESECB_Encrypt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_Test
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
</UL>

<P><STRONG><a name="[94]"></a>Encryption_Test</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, logger.o(i.Encryption_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Encryption_Test &rArr; Decrypt_Data &rArr; HAL_CRYP_AESECB_Decrypt &rArr; CRYP_ProcessData
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt_Data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt_Data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tests
</UL>

<P><STRONG><a name="[95]"></a>EndOfReceiveUART</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, receive_interrupt.o(i.EndOfReceiveUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = EndOfReceiveUART &rArr; IncomingDataAnalysis &rArr; MB_Apply_ReadHoldingRegisters &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingDataAnalysis
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStateMachineLoop
</UL>

<P><STRONG><a name="[97]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32l0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
</UL>

<P><STRONG><a name="[99]"></a>Firmware_Update_Parsing</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, modbus_app_layer.o(i.Firmware_Update_Parsing))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Firmware_Update_Parsing &rArr; Check_ReceivedFirmwareImage_CRC &rArr; Calc_And_Save_Binary_Image_CRC &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Image_Size_To_ExternalFlash
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_For_Bootloading
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Begin_Bootloading
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FUTS_Register
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_DataChunk_ToExternalFlash
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FUTS_Register
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ReceivedFirmwareImage_CRC
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_GPIOInterruptDisable
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingDataAnalysis
</UL>

<P><STRONG><a name="[43]"></a>GPIO_Init</STRONG> (Thumb, 942 bytes, Stack size 40 bytes, gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_Init &rArr; GPIO_SetVal &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetVal
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[40]"></a>GPIO_SetVal</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gpio.o(i.GPIO_SetVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_SetVal &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllLedsBlink
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_PageProgram
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_IsFlashBusy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EnableWriting
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadDeviceID
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EraseSector
</UL>

<P><STRONG><a name="[a1]"></a>GW2BR_QuerySendRF</STRONG> (Thumb, 124 bytes, Stack size 272 bytes, gw_brprotocolsimp.o(i.GW2BR_QuerySendRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = GW2BR_QuerySendRF &rArr; sendDataOverRF &rArr; CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsetNewDataFlag4Node
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataAndSizeOfQuery
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendCommand
</UL>

<P><STRONG><a name="[a2]"></a>GetDataAndSizeOfQuery</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gw_brprotocolsimp.o(i.GetDataAndSizeOfQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetDataAndSizeOfQuery &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add2ReadFromFlash
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GW2BR_QuerySendRF
</UL>

<P><STRONG><a name="[a5]"></a>GetDataOfParamsFromFlash</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, gw_brprotocolsimp.o(i.GetDataOfParamsFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GetDataOfParamsFromFlash &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParams_GW2BRSendRF
</UL>

<P><STRONG><a name="[75]"></a>HAL_CRYPEx_ComputationCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_cryp_ex.o(i.HAL_CRYPEx_ComputationCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_EncryptDecrypt_IT
</UL>

<P><STRONG><a name="[82]"></a>HAL_CRYP_AESECB_Decrypt</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, stm32l0xx_hal_cryp.o(i.HAL_CRYP_AESECB_Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_CRYP_AESECB_Decrypt &rArr; CRYP_ProcessData
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_SetKey
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_ProcessData
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt_Data
</UL>

<P><STRONG><a name="[93]"></a>HAL_CRYP_AESECB_Encrypt</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32l0xx_hal_cryp.o(i.HAL_CRYP_AESECB_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_CRYP_AESECB_Encrypt &rArr; CRYP_ProcessData
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_SetKey
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_ProcessData
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt_Data
</UL>

<P><STRONG><a name="[81]"></a>HAL_CRYP_DeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_cryp.o(i.HAL_CRYP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRYP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt_Data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt_Data
</UL>

<P><STRONG><a name="[a8]"></a>HAL_CRYP_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_cryp.o(i.HAL_CRYP_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_IRQHandler
</UL>

<P><STRONG><a name="[3c]"></a>HAL_CRYP_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32l0xx_hal_cryp.o(i.HAL_CRYP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRYP_IRQHandler &rArr; CRYP_EncryptDecrypt_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_EncryptDecrypt_IT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_RNG_LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>HAL_CRYP_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32l0xx_hal_cryp.o(i.HAL_CRYP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_CRYP_Init &rArr; HAL_CRYP_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_MspInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_AES_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_CRYP_MspDeInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.HAL_CRYP_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_DeInit
</UL>

<P><STRONG><a name="[ab]"></a>HAL_CRYP_MspInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_CRYP_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CRYP_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[41]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllLedsBlink
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_AUTO_FILL_SECTORS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_transmitState
</UL>

<P><STRONG><a name="[85]"></a>HAL_FLASHEx_DATAEEPROM_Erase</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WRITE_WORD
</UL>

<P><STRONG><a name="[86]"></a>HAL_FLASHEx_DATAEEPROM_Program</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WRITE_WORD
</UL>

<P><STRONG><a name="[84]"></a>HAL_FLASHEx_DATAEEPROM_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WRITE_WORD
</UL>

<P><STRONG><a name="[87]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WRITE_WORD
</UL>

<P><STRONG><a name="[ac]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; RF_Routine &rArr; CC1101_receiveData &rArr; CC1101_readBurstReg &rArr; SPI1_ReceiveBurst &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Routine
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_GPIOInterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; RF_Routine &rArr; CC1101_receiveData &rArr; CC1101_readBurstReg &rArr; SPI1_ReceiveBurst &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 686 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
</UL>

<P><STRONG><a name="[61]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetVal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Transmit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_writeBurstReg
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_reset
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_readReg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_readBurstReg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_cmdStrobe
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_writeReg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[6d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_receiveData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WaitUntilFlashNotBusy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndOfReceiveUART
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_ProcessData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_receiveState
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[af]"></a>HAL_IWDG_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32l0xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WD_Period_Set
</UL>

<P><STRONG><a name="[10d]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WD_Reload
</UL>

<P><STRONG><a name="[108]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b2]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[59]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_GPIOInterruptDisable
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
</UL>

<P><STRONG><a name="[5a]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_GPIOInterruptEnable
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_MspInit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_MspInit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[10c]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>

<P><STRONG><a name="[10a]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b5]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b9]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 702 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ba]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 558 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10b]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b8]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b6]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b7]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[bb]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1718 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bd]"></a>HAL_RNG_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_rng.o(i.HAL_RNG_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>HAL_RNG_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32l0xx_hal_rng.o(i.HAL_RNG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_ReadyDataCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_RNG_LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>HAL_RNG_ReadyDataCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_rng.o(i.HAL_RNG_ReadyDataCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RTCEx_DeactivateWakeUpTimer</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_DeactivateWakeUpTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTCEx_DeactivateWakeUpTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_SetWakeUpTimer_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RTCEx_WakeUpTimerEventCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTCEx_WakeUpTimerEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>HAL_RTCEx_WakeUpTimerIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_WakeUpTimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RTC_Init</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 942 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[cf]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[d0]"></a>HAL_SPI_Init</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, stm32l0xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_SPI_Receive</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReceiveBurst
</UL>

<P><STRONG><a name="[8d]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TransmitBurst
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_PageProgram
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EraseSector
</UL>

<P><STRONG><a name="[8a]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TransmitStrobe
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TransmitBurst
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transmit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReceiveBurst
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Receive
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_IsFlashBusy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EnableWriting
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadDeviceID
</UL>

<P><STRONG><a name="[d4]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d6]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d5]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[db]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[3e]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_RNG_LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_UART_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_UART_MspInit</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, stm32l0xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Receive_Interrupt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[e3]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, receive_interrupt.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[e5]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Transmit
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[dd]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IncomingDataAnalysis</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, modbus_app_layer.o(i.IncomingDataAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = IncomingDataAnalysis &rArr; MB_Apply_ReadHoldingRegisters &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NodeParameters_CRC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FUTS_Register
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNewDataFlag4Node
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewDataFlagsSelector
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_Update_Parsing
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_WriteSingleRegister
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_WriteMultipleRegisters
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_ReadHoldingRegisters
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndOfReceiveUART
</UL>

<P><STRONG><a name="[47]"></a>Init_Receive_Interrupt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, receive_interrupt.o(i.Init_Receive_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Init_Receive_Interrupt &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[ed]"></a>KeepAliveResponseHandler</STRONG> (Thumb, 234 bytes, Stack size 80 bytes, gw_brprotocolsimp.o(i.KeepAliveResponseHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = KeepAliveResponseHandler &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIncomingData4BRAnalays
</UL>

<P><STRONG><a name="[e8]"></a>MB_Apply_ReadHoldingRegisters</STRONG> (Thumb, 218 bytes, Stack size 552 bytes, modbus_driver.o(i.MB_Apply_ReadHoldingRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = MB_Apply_ReadHoldingRegisters &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Transmit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingDataAnalysis
</UL>

<P><STRONG><a name="[ea]"></a>MB_Apply_WriteMultipleRegisters</STRONG> (Thumb, 208 bytes, Stack size 296 bytes, modbus_driver.o(i.MB_Apply_WriteMultipleRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = MB_Apply_WriteMultipleRegisters &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Transmit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingDataAnalysis
</UL>

<P><STRONG><a name="[e9]"></a>MB_Apply_WriteSingleRegister</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, modbus_driver.o(i.MB_Apply_WriteSingleRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MB_Apply_WriteSingleRegister &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Transmit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingDataAnalysis
</UL>

<P><STRONG><a name="[6e]"></a>MX_AES_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.MX_AES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_AES_Init &rArr; HAL_CRYP_Init &rArr; HAL_CRYP_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt_Data
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_receiveData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt_Data
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>MainStateMachineLoop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, state_machine.o(i.MainStateMachineLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = MainStateMachineLoop &rArr; EndOfReceiveUART &rArr; IncomingDataAnalysis &rArr; MB_Apply_ReadHoldingRegisters &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndOfReceiveUART
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_transmitState
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_receiveState
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_IncomingDataAnalayzeState
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main
</UL>

<P><STRONG><a name="[fc]"></a>NACK_SendRF</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gw_brprotocolsimp.o(i.NACK_SendRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = NACK_SendRF &rArr; sendDataOverRF &rArr; CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendCommand
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>NewDataFlagsSelector</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, modbus_app_layer.o(i.NewDataFlagsSelector))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NewDataFlagsSelector &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingDataAnalysis
</UL>

<P><STRONG><a name="[56]"></a>Param_SetVal</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, parameters.o(i.Param_SetVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_SetVal &rArr; EEPROM_WRITE_WORD &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WRITE_WORD
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_READ_WORD
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Begin_Bootloading
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>Prepare_For_Bootloading</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bootloader_support.o(i.Prepare_For_Bootloading))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Prepare_For_Bootloading &rArr; EXTERNAL_FLASH_EraseSector &rArr; EXTERNAL_FLASH_EnableWriting &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EraseSector
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_Update_Parsing
</UL>

<P><STRONG><a name="[80]"></a>PrintFromFlashHandler</STRONG> (Thumb, 94 bytes, Stack size 280 bytes, logger.o(i.PrintFromFlashHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = PrintFromFlashHandler &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Analyzer
</UL>

<P><STRONG><a name="[fe]"></a>QueryResp1_ResponseHnadler</STRONG> (Thumb, 170 bytes, Stack size 152 bytes, gw_brprotocolsimp.o(i.QueryResp1_ResponseHnadler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = QueryResp1_ResponseHnadler &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfNewData4Node
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfReset
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIncomingData4BRAnalays
</UL>

<P><STRONG><a name="[ff]"></a>QueryResp2_ResponseHnadler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gw_brprotocolsimp.o(i.QueryResp2_ResponseHnadler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = QueryResp2_ResponseHnadler &rArr; CheckIfReset &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfNewData4Node
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfReset
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIncomingData4BRAnalays
</UL>

<P><STRONG><a name="[100]"></a>RFIncomingData4BRAnalays</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, gw_brprotocolsimp.o(i.RFIncomingData4BRAnalays))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = RFIncomingData4BRAnalays &rArr; QueryResp1_ResponseHnadler &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryResp2_ResponseHnadler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryResp1_ResponseHnadler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeepAliveResponseHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKResponseHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_IncomingDataAnalayzeState
</UL>

<P><STRONG><a name="[f9]"></a>RF_IncomingDataAnalayzeState</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, state_machine.o(i.RF_IncomingDataAnalayzeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = RF_IncomingDataAnalayzeState &rArr; RFIncomingData4BRAnalays &rArr; QueryResp1_ResponseHnadler &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIncomingData4BRAnalays
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStateMachineLoop
</UL>

<P><STRONG><a name="[ae]"></a>RF_Routine</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, radio.o(i.RF_Routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = RF_Routine &rArr; CC1101_receiveData &rArr; CC1101_readBurstReg &rArr; SPI1_ReceiveBurst &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_receiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[101]"></a>RF_SendCommand</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gw_brprotocolsimp.o(i.RF_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = RF_SendCommand &rArr; GW2BR_QuerySendRF &rArr; sendDataOverRF &rArr; CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParams_GW2BRSendRF
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootCommand_SendRF
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootAndDefCommand_SendRF
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NACK_SendRF
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GW2BR_QuerySendRF
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_SendRF
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_transmitState
</UL>

<P><STRONG><a name="[fa]"></a>RF_receiveState</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, state_machine.o(i.RF_receiveState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RF_receiveState &rArr; CC1101_GPIOInterruptEnable &rArr; HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_GPIOInterruptEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_GPIOInterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStateMachineLoop
</UL>

<P><STRONG><a name="[fb]"></a>RF_transmitState</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, state_machine.o(i.RF_transmitState))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = RF_transmitState &rArr; RF_SendCommand &rArr; GW2BR_QuerySendRF &rArr; sendDataOverRF &rArr; CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsetResetBit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsetResetAndDefBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStateMachineLoop
</UL>

<P><STRONG><a name="[cb]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[cc]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[c9]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>Radio_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, radio.o(i.Radio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Radio_Init &rArr; CC1101_SettingsFromMSP430 &rArr; CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_SettingsFromMSP430
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_IsExist
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[9c]"></a>Read_FUTS_Register</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modbus_app_layer.o(i.Read_FUTS_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Read_FUTS_Register &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_Update_Parsing
</UL>

<P><STRONG><a name="[78]"></a>Read_Image_Size_From_ExternalFlash</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bootloader_support.o(i.Read_Image_Size_From_ExternalFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Read_Image_Size_From_ExternalFlash &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_And_Save_Binary_Image_CRC
</UL>

<P><STRONG><a name="[104]"></a>RebootAndDefCommand_SendRF</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gw_brprotocolsimp.o(i.RebootAndDefCommand_SendRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = RebootAndDefCommand_SendRF &rArr; sendDataOverRF &rArr; CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendCommand
</UL>

<P><STRONG><a name="[103]"></a>RebootCommand_SendRF</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gw_brprotocolsimp.o(i.RebootCommand_SendRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = RebootCommand_SendRF &rArr; sendDataOverRF &rArr; CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendCommand
</UL>

<P><STRONG><a name="[6a]"></a>SPI1_Receive</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, spi.o(i.SPI1_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI1_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_readReg
</UL>

<P><STRONG><a name="[68]"></a>SPI1_ReceiveBurst</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, spi.o(i.SPI1_ReceiveBurst))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI1_ReceiveBurst &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_readBurstReg
</UL>

<P><STRONG><a name="[73]"></a>SPI1_Transmit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spi.o(i.SPI1_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI1_Transmit &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_writeReg
</UL>

<P><STRONG><a name="[72]"></a>SPI1_TransmitBurst</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, spi.o(i.SPI1_TransmitBurst))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_writeBurstReg
</UL>

<P><STRONG><a name="[63]"></a>SPI1_TransmitStrobe</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spi.o(i.SPI1_TransmitStrobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI1_TransmitStrobe &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_reset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_cmdStrobe
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>Save_DataChunk_ToExternalFlash</STRONG> (Thumb, 66 bytes, Stack size 272 bytes, modbus_app_layer.o(i.Save_DataChunk_ToExternalFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Save_DataChunk_ToExternalFlash &rArr; EXTERNAL_FLASH_WriteData &rArr; EXTERNAL_FLASH_PageProgram &rArr; EXTERNAL_FLASH_EnableWriting &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_Update_Parsing
</UL>

<P><STRONG><a name="[9e]"></a>Save_Image_Size_To_ExternalFlash</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bootloader_support.o(i.Save_Image_Size_To_ExternalFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Save_Image_Size_To_ExternalFlash &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_Update_Parsing
</UL>

<P><STRONG><a name="[eb]"></a>SetNewDataFlag4Node</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, modbus_app_layer.o(i.SetNewDataFlag4Node))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingDataAnalysis
</UL>

<P><STRONG><a name="[102]"></a>SetParams_GW2BRSendRF</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, gw_brprotocolsimp.o(i.SetParams_GW2BRSendRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SetParams_GW2BRSendRF &rArr; sendDataOverRF &rArr; CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsetNewDataFlag4Node
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataOfParamsFromFlash
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendCommand
</UL>

<P><STRONG><a name="[f4]"></a>Set_RTCAlarmTypeDef</STRONG> (Thumb, 126 bytes, Stack size 36 bytes, rtc.o(i.Set_RTCAlarmTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_RTCAlarmTypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>SystemClock_Config</STRONG> (Thumb, 184 bytes, Stack size 120 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>SystemReset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, common.o(i.SystemReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemReset
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Begin_Bootloading
</UL>

<P><STRONG><a name="[ee]"></a>UART1_Transmit</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, usart.o(i.UART1_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART1_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_WriteSingleRegister
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_WriteMultipleRegisters
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_ReadHoldingRegisters
</UL>

<P><STRONG><a name="[e0]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e2]"></a>UART_CheckIdleState</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e1]"></a>UART_SetConfig</STRONG> (Thumb, 754 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e6]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l063xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>UnsetNewDataFlag4Node</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, modbus_app_layer.o(i.UnsetNewDataFlag4Node))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParams_GW2BRSendRF
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GW2BR_QuerySendRF
</UL>

<P><STRONG><a name="[106]"></a>UnsetResetAndDefBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gw_brprotocolsimp.o(i.UnsetResetAndDefBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UnsetResetAndDefBit &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_transmitState
</UL>

<P><STRONG><a name="[105]"></a>UnsetResetBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gw_brprotocolsimp.o(i.UnsetResetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UnsetResetBit &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_transmitState
</UL>

<P><STRONG><a name="[9a]"></a>Update_FUTS_Register</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, modbus_app_layer.o(i.Update_FUTS_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Update_FUTS_Register &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingDataAnalysis
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_Update_Parsing
</UL>

<P><STRONG><a name="[45]"></a>WD_Period_Set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, watchdog.o(i.WD_Period_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WD_Period_Set &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[4d]"></a>WD_Reload</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, watchdog.o(i.WD_Reload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WD_Reload
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main
</UL>

<P><STRONG><a name="[ec]"></a>Write_NodeParameters_CRC</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, modbus_app_layer.o(i.Write_NodeParameters_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Write_NodeParameters_CRC &rArr; EXTERNAL_FLASH_WriteData_Automatic &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfNewData4Node
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingDataAnalysis
</UL>

<P><STRONG><a name="[88]"></a>_Error_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Error_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WRITE_WORD
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[10e]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[120]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[36]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Image_Size_To_ExternalFlash
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_For_Bootloading
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_And_Save_Binary_Image_CRC
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Begin_Bootloading
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NodeParameters_CRC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FUTS_Register
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewDataFlagsSelector
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingDataAnalysis
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Firmware_Update_Parsing
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ReceivedFirmwareImage_CRC
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_WriteData_Automatic
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_WriteSingleRegister
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_WriteMultipleRegisters
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Apply_ReadHoldingRegisters
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt_Data
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_receiveData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_IsExist
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tests
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_WD_Reset
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_Tests
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_PageProgram
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_IsFlashBusy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EnableWriting
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndOfReceiveUART
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_ReadDeviceID
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_EraseSector
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFromFlashHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_Test
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_GetDeviceID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTERNAL_FLASH_AUTO_FILL_SECTORS
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Analyzer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt_Data
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataOverRF
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParams_GW2BRSendRF
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootCommand_SendRF
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootAndDefCommand_SendRF
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIncomingData4BRAnalays
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryResp2_ResponseHnadler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryResp1_ResponseHnadler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NACK_SendRF
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeepAliveResponseHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataOfParamsFromFlash
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataAndSizeOfQuery
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GW2BR_QuerySendRF
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfReset
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_SendRF
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACKResponseHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_SPI_FlashTest
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_ChecksumOfNodesData
</UL>

<P><STRONG><a name="[7d]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, modbus_app_layer.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FUTS_Register
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStateMachineLoop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Analyzer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendCommand
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[121]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[122]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[123]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[124]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a4]"></a>add2ReadFromFlash</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gw_brprotocolsimp.o(i.add2ReadFromFlash))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataAndSizeOfQuery
</UL>

<P><STRONG><a name="[aa]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>

<P><STRONG><a name="[62]"></a>delayUs</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cc1101.o(i.delayUs))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_writeBurstReg
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_reset
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_readReg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_readBurstReg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_cmdStrobe
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_writeReg
</UL>

<P><STRONG><a name="[25]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, logger.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[69]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_writeBurstReg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_readBurstReg
</UL>

<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = main &rArr; App_Main &rArr; MainStateMachineLoop &rArr; EndOfReceiveUART &rArr; IncomingDataAnalysis &rArr; MB_Apply_ReadHoldingRegisters &rArr; EXTERNAL_FLASH_ReadData &rArr; EXTERNAL_FLASH_WaitUntilFlashNotBusy &rArr; EXTERNAL_FLASH_IsFlashBusy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_AES_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[67]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_writeBurstReg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_readBurstReg
</UL>

<P><STRONG><a name="[3b]"></a>sendDataOverRF</STRONG> (Thumb, 348 bytes, Stack size 192 bytes, gw_brprotocolsimp.o(i.sendDataOverRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sendDataOverRF &rArr; CC1101_writeBurstReg &rArr; SPI1_TransmitBurst &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_AES_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_writeBurstReg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_setTxState
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_setRxState
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_cmdStrobe
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_GPIOInterruptEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_GPIOInterruptDisable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt_Data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParams_GW2BRSendRF
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootCommand_SendRF
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootAndDefCommand_SendRF
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NACK_SendRF
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GW2BR_QuerySendRF
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_SendRF
</UL>

<P><STRONG><a name="[4f]"></a>system_tests</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, logger.o(i.system_tests))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = system_tests &rArr; Encryption_Test &rArr; Decrypt_Data &rArr; HAL_CRYP_AESECB_Decrypt &rArr; CRYP_ProcessData
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllLedsBlink
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encryption_Test
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5e]"></a>CC1101_writeReg</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cc1101.o(i.CC1101_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CC1101_writeReg &rArr; SPI1_Transmit &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transmit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101_SettingsFromMSP430
</UL>

<P><STRONG><a name="[f0]"></a>MX_GPIO_Init</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>MX_LPUART1_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.MX_LPUART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_LPUART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>MX_RTC_Init</STRONG> (Thumb, 280 bytes, Stack size 112 bytes, main.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTCAlarmTypeDef
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>MX_SPI1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>MX_SPI2_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>CRYP_EncryptDecrypt_IT</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32l0xx_hal_cryp.o(i.CRYP_EncryptDecrypt_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRYP_EncryptDecrypt_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYPEx_ComputationCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>CRYP_ProcessData</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, stm32l0xx_hal_cryp.o(i.CRYP_ProcessData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CRYP_ProcessData
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_AESECB_Encrypt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_AESECB_Decrypt
</UL>

<P><STRONG><a name="[a6]"></a>CRYP_SetKey</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_cryp.o(i.CRYP_SetKey))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_AESECB_Encrypt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRYP_AESECB_Decrypt
</UL>

<P><STRONG><a name="[24]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[d8]"></a>UART_EndRxTransfer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>UART_Receive_IT</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>UART_Transmit_IT</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[bc]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[98]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32l0xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b4]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[10f]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
